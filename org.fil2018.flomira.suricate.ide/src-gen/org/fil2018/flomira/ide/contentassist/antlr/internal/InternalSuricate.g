/*
 * generated by Xtext 2.12.0
 */
grammar InternalSuricate;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.fil2018.flomira.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.fil2018.flomira.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.fil2018.flomira.services.SuricateGrammarAccess;

}
@parser::members {
	private SuricateGrammarAccess grammarAccess;

	public void setGrammarAccess(SuricateGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgramme
entryRuleProgramme
:
{ before(grammarAccess.getProgrammeRule()); }
	 ruleProgramme
{ after(grammarAccess.getProgrammeRule()); } 
	 EOF 
;

// Rule Programme
ruleProgramme 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgrammeAccess().getElementsAssignment()); }
		(rule__Programme__ElementsAssignment)*
		{ after(grammarAccess.getProgrammeAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLigne
entryRuleLigne
:
{ before(grammarAccess.getLigneRule()); }
	 ruleLigne
{ after(grammarAccess.getLigneRule()); } 
	 EOF 
;

// Rule Ligne
ruleLigne 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLigneAccess().getAlternatives()); }
		(rule__Ligne__Alternatives)
		{ after(grammarAccess.getLigneAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAffectation
entryRuleAffectation
:
{ before(grammarAccess.getAffectationRule()); }
	 ruleAffectation
{ after(grammarAccess.getAffectationRule()); } 
	 EOF 
;

// Rule Affectation
ruleAffectation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAffectationAccess().getGroup()); }
		(rule__Affectation__Group__0)
		{ after(grammarAccess.getAffectationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
		(rule__Instruction__Alternatives)
		{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoucle
entryRuleBoucle
:
{ before(grammarAccess.getBoucleRule()); }
	 ruleBoucle
{ after(grammarAccess.getBoucleRule()); } 
	 EOF 
;

// Rule Boucle
ruleBoucle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoucleAccess().getIfBoucleParserRuleCall()); }
		ruleIfBoucle
		{ after(grammarAccess.getBoucleAccess().getIfBoucleParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfBoucle
entryRuleIfBoucle
:
{ before(grammarAccess.getIfBoucleRule()); }
	 ruleIfBoucle
{ after(grammarAccess.getIfBoucleRule()); } 
	 EOF 
;

// Rule IfBoucle
ruleIfBoucle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfBoucleAccess().getGroup()); }
		(rule__IfBoucle__Group__0)
		{ after(grammarAccess.getIfBoucleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAppelMethode
entryRuleAppelMethode
:
{ before(grammarAccess.getAppelMethodeRule()); }
	 ruleAppelMethode
{ after(grammarAccess.getAppelMethodeRule()); } 
	 EOF 
;

// Rule AppelMethode
ruleAppelMethode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAppelMethodeAccess().getAlternatives()); }
		(rule__AppelMethode__Alternatives)
		{ after(grammarAccess.getAppelMethodeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAppelMethComposite
entryRuleAppelMethComposite
:
{ before(grammarAccess.getAppelMethCompositeRule()); }
	 ruleAppelMethComposite
{ after(grammarAccess.getAppelMethCompositeRule()); } 
	 EOF 
;

// Rule AppelMethComposite
ruleAppelMethComposite 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAppelMethCompositeAccess().getGroup()); }
		(rule__AppelMethComposite__Group__0)
		{ after(grammarAccess.getAppelMethCompositeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypePrimaire
entryRuleTypePrimaire
:
{ before(grammarAccess.getTypePrimaireRule()); }
	 ruleTypePrimaire
{ after(grammarAccess.getTypePrimaireRule()); } 
	 EOF 
;

// Rule TypePrimaire
ruleTypePrimaire 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypePrimaireAccess().getAlternatives()); }
		(rule__TypePrimaire__Alternatives)
		{ after(grammarAccess.getTypePrimaireAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getNameAssignment()); }
		(rule__Variable__NameAssignment)
		{ after(grammarAccess.getVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralAccess().getINTTerminalRuleCall()); }
		RULE_INT
		{ after(grammarAccess.getIntLiteralAccess().getINTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAppelMethSimple
entryRuleAppelMethSimple
:
{ before(grammarAccess.getAppelMethSimpleRule()); }
	 ruleAppelMethSimple
{ after(grammarAccess.getAppelMethSimpleRule()); } 
	 EOF 
;

// Rule AppelMethSimple
ruleAppelMethSimple 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAppelMethSimpleAccess().getGroup()); }
		(rule__AppelMethSimple__Group__0)
		{ after(grammarAccess.getAppelMethSimpleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParametre
entryRuleParametre
:
{ before(grammarAccess.getParametreRule()); }
	 ruleParametre
{ after(grammarAccess.getParametreRule()); } 
	 EOF 
;

// Rule Parametre
ruleParametre 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParametreAccess().getAlternatives()); }
		(rule__Parametre__Alternatives)
		{ after(grammarAccess.getParametreAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLigneAccess().getGroup_0()); }
		(rule__Ligne__Group_0__0)
		{ after(grammarAccess.getLigneAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getLigneAccess().getAffAssignment_1()); }
		(rule__Ligne__AffAssignment_1)
		{ after(grammarAccess.getLigneAccess().getAffAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getAppelMethodeParserRuleCall_0()); }
		ruleAppelMethode
		{ after(grammarAccess.getInstructionAccess().getAppelMethodeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getBoucleParserRuleCall_1()); }
		ruleBoucle
		{ after(grammarAccess.getInstructionAccess().getBoucleParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethode__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppelMethodeAccess().getAppelMethSimpleParserRuleCall_0()); }
		ruleAppelMethSimple
		{ after(grammarAccess.getAppelMethodeAccess().getAppelMethSimpleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAppelMethodeAccess().getAppelMethCompositeParserRuleCall_1()); }
		ruleAppelMethComposite
		{ after(grammarAccess.getAppelMethodeAccess().getAppelMethCompositeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypePrimaire__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypePrimaireAccess().getIntLiteralParserRuleCall_0()); }
		ruleIntLiteral
		{ after(grammarAccess.getTypePrimaireAccess().getIntLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypePrimaireAccess().getStringLiteralParserRuleCall_1()); }
		ruleStringLiteral
		{ after(grammarAccess.getTypePrimaireAccess().getStringLiteralParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametre__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParametreAccess().getInstructionParserRuleCall_0()); }
		ruleInstruction
		{ after(grammarAccess.getParametreAccess().getInstructionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getParametreAccess().getVariableParserRuleCall_1()); }
		ruleVariable
		{ after(grammarAccess.getParametreAccess().getVariableParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getParametreAccess().getTypePrimaireParserRuleCall_2()); }
		ruleTypePrimaire
		{ after(grammarAccess.getParametreAccess().getTypePrimaireParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ligne__Group_0__0__Impl
	rule__Ligne__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneAccess().getInstrAssignment_0_0()); }
	(rule__Ligne__InstrAssignment_0_0)
	{ after(grammarAccess.getLigneAccess().getInstrAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ligne__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneAccess().getGroup_0_1()); }
	(rule__Ligne__Group_0_1__0)?
	{ after(grammarAccess.getLigneAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ligne__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ligne__Group_0_1__0__Impl
	rule__Ligne__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneAccess().getHyphenMinusGreaterThanSignKeyword_0_1_0()); }
	'->'
	{ after(grammarAccess.getLigneAccess().getHyphenMinusGreaterThanSignKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ligne__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneAccess().getVarAssignment_0_1_1()); }
	(rule__Ligne__VarAssignment_0_1_1)
	{ after(grammarAccess.getLigneAccess().getVarAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Affectation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group__0__Impl
	rule__Affectation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getAffectationAction_0()); }
	()
	{ after(grammarAccess.getAffectationAccess().getAffectationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group__1__Impl
	rule__Affectation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getValeurAssignment_1()); }
	(rule__Affectation__ValeurAssignment_1)
	{ after(grammarAccess.getAffectationAccess().getValeurAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getGroup_2()); }
	(rule__Affectation__Group_2__0)?
	{ after(grammarAccess.getAffectationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Affectation__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group_2__0__Impl
	rule__Affectation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getHyphenMinusGreaterThanSignKeyword_2_0()); }
	'->'
	{ after(grammarAccess.getAffectationAccess().getHyphenMinusGreaterThanSignKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Affectation__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAffectationAccess().getVariableAssignment_2_1()); }
	(rule__Affectation__VariableAssignment_2_1)
	{ after(grammarAccess.getAffectationAccess().getVariableAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfBoucle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBoucle__Group__0__Impl
	rule__IfBoucle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBoucle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBoucleAccess().getIfKeyword_0()); }
	'If'
	{ after(grammarAccess.getIfBoucleAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBoucle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBoucle__Group__1__Impl
	rule__IfBoucle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBoucle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBoucleAccess().getAppelMethodeParserRuleCall_1()); }
	ruleAppelMethode
	{ after(grammarAccess.getIfBoucleAccess().getAppelMethodeParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBoucle__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBoucle__Group__2__Impl
	rule__IfBoucle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBoucle__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBoucleAccess().getThenKeyword_2()); }
	'Then'
	{ after(grammarAccess.getIfBoucleAccess().getThenKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBoucle__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBoucle__Group__3__Impl
	rule__IfBoucle__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBoucle__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBoucleAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getIfBoucleAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBoucle__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBoucle__Group__4__Impl
	rule__IfBoucle__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBoucle__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getIfBoucleAccess().getIfBodyAssignment_4()); }
		(rule__IfBoucle__IfBodyAssignment_4)
		{ after(grammarAccess.getIfBoucleAccess().getIfBodyAssignment_4()); }
	)
	(
		{ before(grammarAccess.getIfBoucleAccess().getIfBodyAssignment_4()); }
		(rule__IfBoucle__IfBodyAssignment_4)*
		{ after(grammarAccess.getIfBoucleAccess().getIfBodyAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBoucle__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfBoucle__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBoucle__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfBoucleAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getIfBoucleAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AppelMethComposite__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppelMethComposite__Group__0__Impl
	rule__AppelMethComposite__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethComposite__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelMethCompositeAccess().getNameAssignment_0()); }
	(rule__AppelMethComposite__NameAssignment_0)
	{ after(grammarAccess.getAppelMethCompositeAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethComposite__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppelMethComposite__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethComposite__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAppelMethCompositeAccess().getGroup_1()); }
		(rule__AppelMethComposite__Group_1__0)
		{ after(grammarAccess.getAppelMethCompositeAccess().getGroup_1()); }
	)
	(
		{ before(grammarAccess.getAppelMethCompositeAccess().getGroup_1()); }
		(rule__AppelMethComposite__Group_1__0)*
		{ after(grammarAccess.getAppelMethCompositeAccess().getGroup_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AppelMethComposite__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppelMethComposite__Group_1__0__Impl
	rule__AppelMethComposite__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethComposite__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelMethCompositeAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getAppelMethCompositeAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethComposite__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppelMethComposite__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethComposite__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelMethCompositeAccess().getMethodeAssignment_1_1()); }
	(rule__AppelMethComposite__MethodeAssignment_1_1)
	{ after(grammarAccess.getAppelMethCompositeAccess().getMethodeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AppelMethSimple__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppelMethSimple__Group__0__Impl
	rule__AppelMethSimple__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelMethSimpleAccess().getMethodeAction_0()); }
	()
	{ after(grammarAccess.getAppelMethSimpleAccess().getMethodeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppelMethSimple__Group__1__Impl
	rule__AppelMethSimple__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelMethSimpleAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getAppelMethSimpleAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppelMethSimple__Group__2__Impl
	rule__AppelMethSimple__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelMethSimpleAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getAppelMethSimpleAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppelMethSimple__Group__3__Impl
	rule__AppelMethSimple__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelMethSimpleAccess().getGroup_3()); }
	(rule__AppelMethSimple__Group_3__0)?
	{ after(grammarAccess.getAppelMethSimpleAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppelMethSimple__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelMethSimpleAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getAppelMethSimpleAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AppelMethSimple__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppelMethSimple__Group_3__0__Impl
	rule__AppelMethSimple__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelMethSimpleAccess().getParamsAssignment_3_0()); }
	(rule__AppelMethSimple__ParamsAssignment_3_0)
	{ after(grammarAccess.getAppelMethSimpleAccess().getParamsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppelMethSimple__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelMethSimpleAccess().getGroup_3_1()); }
	(rule__AppelMethSimple__Group_3_1__0)*
	{ after(grammarAccess.getAppelMethSimpleAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AppelMethSimple__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppelMethSimple__Group_3_1__0__Impl
	rule__AppelMethSimple__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelMethSimpleAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getAppelMethSimpleAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppelMethSimple__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppelMethSimpleAccess().getParamsAssignment_3_1_1()); }
	(rule__AppelMethSimple__ParamsAssignment_3_1_1)
	{ after(grammarAccess.getAppelMethSimpleAccess().getParamsAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Programme__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgrammeAccess().getElementsLigneParserRuleCall_0()); }
		ruleLigne
		{ after(grammarAccess.getProgrammeAccess().getElementsLigneParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__InstrAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLigneAccess().getInstrInstructionParserRuleCall_0_0_0()); }
		ruleInstruction
		{ after(grammarAccess.getLigneAccess().getInstrInstructionParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__VarAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLigneAccess().getVarVariableParserRuleCall_0_1_1_0()); }
		ruleVariable
		{ after(grammarAccess.getLigneAccess().getVarVariableParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__AffAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLigneAccess().getAffAffectationParserRuleCall_1_0()); }
		ruleAffectation
		{ after(grammarAccess.getLigneAccess().getAffAffectationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__ValeurAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAffectationAccess().getValeurTypePrimaireParserRuleCall_1_0()); }
		ruleTypePrimaire
		{ after(grammarAccess.getAffectationAccess().getValeurTypePrimaireParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__VariableAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAffectationAccess().getVariableVariableParserRuleCall_2_1_0()); }
		ruleVariable
		{ after(grammarAccess.getAffectationAccess().getVariableVariableParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBoucle__IfBodyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfBoucleAccess().getIfBodyLigneParserRuleCall_4_0()); }
		ruleLigne
		{ after(grammarAccess.getIfBoucleAccess().getIfBodyLigneParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethComposite__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppelMethCompositeAccess().getNameVariableCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAppelMethCompositeAccess().getNameVariableIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAppelMethCompositeAccess().getNameVariableIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAppelMethCompositeAccess().getNameVariableCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethComposite__MethodeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppelMethCompositeAccess().getMethodeAppelMethSimpleParserRuleCall_1_1_0()); }
		ruleAppelMethSimple
		{ after(grammarAccess.getAppelMethCompositeAccess().getMethodeAppelMethSimpleParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__ParamsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppelMethSimpleAccess().getParamsParametreParserRuleCall_3_0_0()); }
		ruleParametre
		{ after(grammarAccess.getAppelMethSimpleAccess().getParamsParametreParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppelMethSimple__ParamsAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppelMethSimpleAccess().getParamsParametreParserRuleCall_3_1_1_0()); }
		ruleParametre
		{ after(grammarAccess.getAppelMethSimpleAccess().getParamsParametreParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
