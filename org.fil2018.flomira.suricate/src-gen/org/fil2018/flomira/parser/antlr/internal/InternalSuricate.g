/*
 * generated by Xtext 2.12.0
 */
grammar InternalSuricate;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.fil2018.flomira.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.fil2018.flomira.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.fil2018.flomira.services.SuricateGrammarAccess;

}

@parser::members {

 	private SuricateGrammarAccess grammarAccess;

    public InternalSuricateParser(TokenStream input, SuricateGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Programme";
   	}

   	@Override
   	protected SuricateGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgramme
entryRuleProgramme returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgrammeRule()); }
	iv_ruleProgramme=ruleProgramme
	{ $current=$iv_ruleProgramme.current; }
	EOF;

// Rule Programme
ruleProgramme returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgrammeAccess().getElementsLigneParserRuleCall_0());
			}
			lv_elements_0_0=ruleLigne
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgrammeRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.fil2018.flomira.Suricate.Ligne");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleLigne
entryRuleLigne returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLigneRule()); }
	iv_ruleLigne=ruleLigne
	{ $current=$iv_ruleLigne.current; }
	EOF;

// Rule Ligne
ruleLigne returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLigneAccess().getInstrInstructionParserRuleCall_0_0_0());
					}
					lv_instr_0_0=ruleInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLigneRule());
						}
						set(
							$current,
							"instr",
							lv_instr_0_0,
							"org.fil2018.flomira.Suricate.Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_1='->'
				{
					newLeafNode(otherlv_1, grammarAccess.getLigneAccess().getHyphenMinusGreaterThanSignKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLigneAccess().getVariableVariableParserRuleCall_0_1_1_0());
						}
						lv_variable_2_0=ruleVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLigneRule());
							}
							set(
								$current,
								"variable",
								lv_variable_2_0,
								"org.fil2018.flomira.Suricate.Variable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLigneAccess().getAffAffectationParserRuleCall_1_0());
				}
				lv_aff_3_0=ruleAffectation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLigneRule());
					}
					set(
						$current,
						"aff",
						lv_aff_3_0,
						"org.fil2018.flomira.Suricate.Affectation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAffectation
entryRuleAffectation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAffectationRule()); }
	iv_ruleAffectation=ruleAffectation
	{ $current=$iv_ruleAffectation.current; }
	EOF;

// Rule Affectation
ruleAffectation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAffectationAccess().getValeurTypePrimaireParserRuleCall_0_0());
				}
				lv_valeur_0_0=ruleTypePrimaire
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAffectationRule());
					}
					set(
						$current,
						"valeur",
						lv_valeur_0_0,
						"org.fil2018.flomira.Suricate.TypePrimaire");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getAffectationAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAffectationAccess().getVariableVariableParserRuleCall_2_0());
				}
				lv_variable_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAffectationRule());
					}
					set(
						$current,
						"variable",
						lv_variable_2_0,
						"org.fil2018.flomira.Suricate.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInstructionAccess().getMethodeAppelMethodeParserRuleCall_0_0());
				}
				lv_methode_0_0=ruleAppelMethode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionRule());
					}
					set(
						$current,
						"methode",
						lv_methode_0_0,
						"org.fil2018.flomira.Suricate.AppelMethode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getInstructionAccess().getBoucleBoucleParserRuleCall_1_0());
				}
				lv_boucle_1_0=ruleBoucle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionRule());
					}
					set(
						$current,
						"boucle",
						lv_boucle_1_0,
						"org.fil2018.flomira.Suricate.Boucle");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBoucle
entryRuleBoucle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoucleRule()); }
	iv_ruleBoucle=ruleBoucle
	{ $current=$iv_ruleBoucle.current; }
	EOF;

// Rule Boucle
ruleBoucle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBoucleAccess().getIfBoucleParserRuleCall());
	}
	this_IfBoucle_0=ruleIfBoucle
	{
		$current = $this_IfBoucle_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleIfBoucle
entryRuleIfBoucle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfBoucleRule()); }
	iv_ruleIfBoucle=ruleIfBoucle
	{ $current=$iv_ruleIfBoucle.current; }
	EOF;

// Rule IfBoucle
ruleIfBoucle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='If'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfBoucleAccess().getIfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getIfBoucleAccess().getAppelMethodeParserRuleCall_1());
		}
		this_AppelMethode_1=ruleAppelMethode
		{
			$current = $this_AppelMethode_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2='Then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfBoucleAccess().getThenKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfBoucleAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfBoucleAccess().getIfBodyLigneParserRuleCall_4_0());
				}
				lv_ifBody_4_0=ruleLigne
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfBoucleRule());
					}
					add(
						$current,
						"ifBody",
						lv_ifBody_4_0,
						"org.fil2018.flomira.Suricate.Ligne");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getIfBoucleAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleAppelMethode
entryRuleAppelMethode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppelMethodeRule()); }
	iv_ruleAppelMethode=ruleAppelMethode
	{ $current=$iv_ruleAppelMethode.current; }
	EOF;

// Rule AppelMethode
ruleAppelMethode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAppelMethodeAccess().getSimpleAppelMethSimpleParserRuleCall_0_0());
				}
				lv_simple_0_0=ruleAppelMethSimple
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppelMethodeRule());
					}
					set(
						$current,
						"simple",
						lv_simple_0_0,
						"org.fil2018.flomira.Suricate.AppelMethSimple");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAppelMethodeAccess().getCompositeAppelMethCompositeParserRuleCall_1_0());
				}
				lv_composite_1_0=ruleAppelMethComposite
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppelMethodeRule());
					}
					set(
						$current,
						"composite",
						lv_composite_1_0,
						"org.fil2018.flomira.Suricate.AppelMethComposite");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAppelMethComposite
entryRuleAppelMethComposite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppelMethCompositeRule()); }
	iv_ruleAppelMethComposite=ruleAppelMethComposite
	{ $current=$iv_ruleAppelMethComposite.current; }
	EOF;

// Rule AppelMethComposite
ruleAppelMethComposite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAppelMethCompositeRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAppelMethCompositeAccess().getNameVariableCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getAppelMethCompositeAccess().getFullStopKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAppelMethCompositeAccess().getMethodeAppelMethSimpleParserRuleCall_1_1_0());
					}
					lv_methode_2_0=ruleAppelMethSimple
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAppelMethCompositeRule());
						}
						add(
							$current,
							"methode",
							lv_methode_2_0,
							"org.fil2018.flomira.Suricate.AppelMethSimple");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleTypePrimaire
entryRuleTypePrimaire returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypePrimaireRule()); }
	iv_ruleTypePrimaire=ruleTypePrimaire
	{ $current=$iv_ruleTypePrimaire.current.getText(); }
	EOF;

// Rule TypePrimaire
ruleTypePrimaire returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypePrimaireAccess().getIntLiteralParserRuleCall_0());
		}
		this_IntLiteral_0=ruleIntLiteral
		{
			$current.merge(this_IntLiteral_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypePrimaireAccess().getStringLiteralParserRuleCall_1());
		}
		this_StringLiteral_1=ruleStringLiteral
		{
			$current.merge(this_StringLiteral_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	iv_ruleIntLiteral=ruleIntLiteral
	{ $current=$iv_ruleIntLiteral.current.getText(); }
	EOF;

// Rule IntLiteral
ruleIntLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getIntLiteralAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current.getText(); }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleAppelMethSimple
entryRuleAppelMethSimple returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppelMethSimpleRule()); }
	iv_ruleAppelMethSimple=ruleAppelMethSimple
	{ $current=$iv_ruleAppelMethSimple.current; }
	EOF;

// Rule AppelMethSimple
ruleAppelMethSimple returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_methodeName_0_0=RULE_ID
				{
					newLeafNode(lv_methodeName_0_0, grammarAccess.getAppelMethSimpleAccess().getMethodeNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAppelMethSimpleRule());
					}
					setWithLastConsumed(
						$current,
						"methodeName",
						lv_methodeName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAppelMethSimpleAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAppelMethSimpleAccess().getParamsParametreParserRuleCall_2_0_0());
					}
					lv_params_2_0=ruleParametre
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAppelMethSimpleRule());
						}
						add(
							$current,
							"params",
							lv_params_2_0,
							"org.fil2018.flomira.Suricate.Parametre");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getAppelMethSimpleAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAppelMethSimpleAccess().getParamsParametreParserRuleCall_2_1_1_0());
						}
						lv_params_4_0=ruleParametre
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAppelMethSimpleRule());
							}
							add(
								$current,
								"params",
								lv_params_4_0,
								"org.fil2018.flomira.Suricate.Parametre");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getAppelMethSimpleAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleParametre
entryRuleParametre returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametreRule()); }
	iv_ruleParametre=ruleParametre
	{ $current=$iv_ruleParametre.current; }
	EOF;

// Rule Parametre
ruleParametre returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParametreAccess().getMethodeAppelMethodeParserRuleCall_0_0());
				}
				lv_methode_0_0=ruleAppelMethode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametreRule());
					}
					set(
						$current,
						"methode",
						lv_methode_0_0,
						"org.fil2018.flomira.Suricate.AppelMethode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getParametreAccess().getVariableVariableParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametreRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"org.fil2018.flomira.Suricate.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getParametreAccess().getValeurTypePrimaireParserRuleCall_2_0());
				}
				lv_valeur_2_0=ruleTypePrimaire
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametreRule());
					}
					set(
						$current,
						"valeur",
						lv_valeur_2_0,
						"org.fil2018.flomira.Suricate.TypePrimaire");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
