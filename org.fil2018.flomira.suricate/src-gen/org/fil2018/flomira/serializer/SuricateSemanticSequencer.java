/*
 * generated by Xtext 2.12.0
 */
package org.fil2018.flomira.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.fil2018.flomira.services.SuricateGrammarAccess;
import org.fil2018.flomira.suricate.Affectation;
import org.fil2018.flomira.suricate.AppelMethComposite;
import org.fil2018.flomira.suricate.Ligne;
import org.fil2018.flomira.suricate.Methode;
import org.fil2018.flomira.suricate.Programme;
import org.fil2018.flomira.suricate.SuricatePackage;
import org.fil2018.flomira.suricate.Variable;

@SuppressWarnings("all")
public class SuricateSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SuricateGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SuricatePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SuricatePackage.AFFECTATION:
				sequence_Affectation(context, (Affectation) semanticObject); 
				return; 
			case SuricatePackage.APPEL_METH_COMPOSITE:
				if (rule == grammarAccess.getAppelMethodeRule()
						|| rule == grammarAccess.getAppelMethCompositeRule()) {
					sequence_AppelMethComposite(context, (AppelMethComposite) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInstructionRule()
						|| rule == grammarAccess.getParametreRule()) {
					sequence_AppelMethComposite_IfBoucle(context, (AppelMethComposite) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBoucleRule()
						|| rule == grammarAccess.getIfBoucleRule()) {
					sequence_AppelMethComposite_IfBoucle(context, (AppelMethComposite) semanticObject); 
					return; 
				}
				else break;
			case SuricatePackage.LIGNE:
				sequence_Ligne(context, (Ligne) semanticObject); 
				return; 
			case SuricatePackage.METHODE:
				if (rule == grammarAccess.getInstructionRule()
						|| rule == grammarAccess.getParametreRule()) {
					sequence_AppelMethSimple_IfBoucle(context, (Methode) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBoucleRule()
						|| rule == grammarAccess.getIfBoucleRule()) {
					sequence_AppelMethSimple_IfBoucle(context, (Methode) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAppelMethodeRule()
						|| rule == grammarAccess.getAppelMethSimpleRule()) {
					sequence_AppelMethSimple(context, (Methode) semanticObject); 
					return; 
				}
				else break;
			case SuricatePackage.PROGRAMME:
				sequence_Programme(context, (Programme) semanticObject); 
				return; 
			case SuricatePackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Affectation returns Affectation
	 *
	 * Constraint:
	 *     (valeur=TypePrimaire variable=Variable?)
	 */
	protected void sequence_Affectation(ISerializationContext context, Affectation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AppelMethode returns AppelMethComposite
	 *     AppelMethComposite returns AppelMethComposite
	 *
	 * Constraint:
	 *     (name=[Variable|ID] methode+=AppelMethSimple+)
	 */
	protected void sequence_AppelMethComposite(ISerializationContext context, AppelMethComposite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns AppelMethComposite
	 *     Parametre returns AppelMethComposite
	 *
	 * Constraint:
	 *     (name=[Variable|ID] methode+=AppelMethSimple+ ifBody+=Ligne*)
	 */
	protected void sequence_AppelMethComposite_IfBoucle(ISerializationContext context, AppelMethComposite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     Boucle returns AppelMethComposite
	//     IfBoucle returns AppelMethComposite
	//
	// Constraint:
	//     (name=[Variable|ID] methode+=AppelMethSimple+ ifBody+=Ligne+)
	//
	// protected void sequence_AppelMethComposite_IfBoucle(ISerializationContext context, AppelMethComposite semanticObject) { }
	
	/**
	 * Contexts:
	 *     Instruction returns Methode
	 *     Parametre returns Methode
	 *
	 * Constraint:
	 *     ((params+=Parametre params+=Parametre*)? ifBody+=Ligne*)
	 */
	protected void sequence_AppelMethSimple_IfBoucle(ISerializationContext context, Methode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     Boucle returns Methode
	//     IfBoucle returns Methode
	//
	// Constraint:
	//     ((params+=Parametre params+=Parametre*)? ifBody+=Ligne+)
	//
	// protected void sequence_AppelMethSimple_IfBoucle(ISerializationContext context, Methode semanticObject) { }
	
	/**
	 * Contexts:
	 *     AppelMethode returns Methode
	 *     AppelMethSimple returns Methode
	 *
	 * Constraint:
	 *     (params+=Parametre params+=Parametre*)?
	 */
	protected void sequence_AppelMethSimple(ISerializationContext context, Methode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ligne returns Ligne
	 *
	 * Constraint:
	 *     ((instr=Instruction var=Variable?) | aff=Affectation)
	 */
	protected void sequence_Ligne(ISerializationContext context, Ligne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Programme returns Programme
	 *
	 * Constraint:
	 *     elements+=Ligne+
	 */
	protected void sequence_Programme(ISerializationContext context, Programme semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *     Parametre returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SuricatePackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuricatePackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
