/*
 * generated by Xtext 2.12.0
 */
package org.fil2018.flomira.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.fil2018.flomira.services.SuricateGrammarAccess;
import org.fil2018.flomira.suricate.Affectation;
import org.fil2018.flomira.suricate.AppelMethComposite;
import org.fil2018.flomira.suricate.AppelMethSimple;
import org.fil2018.flomira.suricate.AppelMethode;
import org.fil2018.flomira.suricate.Instruction;
import org.fil2018.flomira.suricate.Ligne;
import org.fil2018.flomira.suricate.Parametre;
import org.fil2018.flomira.suricate.Programme;
import org.fil2018.flomira.suricate.SuricatePackage;
import org.fil2018.flomira.suricate.Variable;

@SuppressWarnings("all")
public class SuricateSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SuricateGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SuricatePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SuricatePackage.AFFECTATION:
				sequence_Affectation(context, (Affectation) semanticObject); 
				return; 
			case SuricatePackage.APPEL_METH_COMPOSITE:
				sequence_AppelMethComposite(context, (AppelMethComposite) semanticObject); 
				return; 
			case SuricatePackage.APPEL_METH_SIMPLE:
				sequence_AppelMethSimple(context, (AppelMethSimple) semanticObject); 
				return; 
			case SuricatePackage.APPEL_METHODE:
				if (rule == grammarAccess.getAppelMethodeRule()) {
					sequence_AppelMethode(context, (AppelMethode) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBoucleRule()
						|| rule == grammarAccess.getIfBoucleRule()) {
					sequence_AppelMethode_IfBoucle(context, (AppelMethode) semanticObject); 
					return; 
				}
				else break;
			case SuricatePackage.INSTRUCTION:
				sequence_Instruction(context, (Instruction) semanticObject); 
				return; 
			case SuricatePackage.LIGNE:
				sequence_Ligne(context, (Ligne) semanticObject); 
				return; 
			case SuricatePackage.PARAMETRE:
				sequence_Parametre(context, (Parametre) semanticObject); 
				return; 
			case SuricatePackage.PROGRAMME:
				sequence_Programme(context, (Programme) semanticObject); 
				return; 
			case SuricatePackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Affectation returns Affectation
	 *
	 * Constraint:
	 *     (valeur=TypePrimaire variable=Variable)
	 */
	protected void sequence_Affectation(ISerializationContext context, Affectation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SuricatePackage.Literals.AFFECTATION__VALEUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuricatePackage.Literals.AFFECTATION__VALEUR));
			if (transientValues.isValueTransient(semanticObject, SuricatePackage.Literals.AFFECTATION__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuricatePackage.Literals.AFFECTATION__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAffectationAccess().getValeurTypePrimaireParserRuleCall_0_0(), semanticObject.getValeur());
		feeder.accept(grammarAccess.getAffectationAccess().getVariableVariableParserRuleCall_2_0(), semanticObject.getVariable());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AppelMethComposite returns AppelMethComposite
	 *
	 * Constraint:
	 *     (name=[Variable|ID] methode+=AppelMethSimple+)
	 */
	protected void sequence_AppelMethComposite(ISerializationContext context, AppelMethComposite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AppelMethSimple returns AppelMethSimple
	 *
	 * Constraint:
	 *     (methodeName=ID (params+=Parametre params+=Parametre*)?)
	 */
	protected void sequence_AppelMethSimple(ISerializationContext context, AppelMethSimple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AppelMethode returns AppelMethode
	 *
	 * Constraint:
	 *     (simple=AppelMethSimple | composite=AppelMethComposite)
	 */
	protected void sequence_AppelMethode(ISerializationContext context, AppelMethode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boucle returns AppelMethode
	 *     IfBoucle returns AppelMethode
	 *
	 * Constraint:
	 *     ((simple=AppelMethSimple | composite=AppelMethComposite) ifBody+=Ligne+)
	 */
	protected void sequence_AppelMethode_IfBoucle(ISerializationContext context, AppelMethode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Instruction
	 *
	 * Constraint:
	 *     (methode=AppelMethode | boucle=Boucle)
	 */
	protected void sequence_Instruction(ISerializationContext context, Instruction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ligne returns Ligne
	 *
	 * Constraint:
	 *     ((instr=Instruction variable=Variable?) | aff=Affectation)
	 */
	protected void sequence_Ligne(ISerializationContext context, Ligne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parametre returns Parametre
	 *
	 * Constraint:
	 *     (methode=AppelMethode | variable=Variable | valeur=TypePrimaire)
	 */
	protected void sequence_Parametre(ISerializationContext context, Parametre semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Programme returns Programme
	 *
	 * Constraint:
	 *     elements+=Ligne+
	 */
	protected void sequence_Programme(ISerializationContext context, Programme semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SuricatePackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuricatePackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
