/*
 * generated by Xtext 2.12.0
 */
package org.fil2018.flomira.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.fil2018.flomira.services.SuricateGrammarAccess;
import org.fil2018.flomira.suricate.Affectation;
import org.fil2018.flomira.suricate.Constructeur;
import org.fil2018.flomira.suricate.Methode;
import org.fil2018.flomira.suricate.Operation;
import org.fil2018.flomira.suricate.Programme;
import org.fil2018.flomira.suricate.SuricatePackage;
import org.fil2018.flomira.suricate.Variable;

@SuppressWarnings("all")
public class SuricateSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SuricateGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SuricatePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SuricatePackage.AFFECTATION:
				sequence_Affectation(context, (Affectation) semanticObject); 
				return; 
			case SuricatePackage.CONSTRUCTEUR:
				sequence_Constructeur(context, (Constructeur) semanticObject); 
				return; 
			case SuricatePackage.METHODE:
				sequence_Methode(context, (Methode) semanticObject); 
				return; 
			case SuricatePackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case SuricatePackage.PROGRAMME:
				sequence_Programme(context, (Programme) semanticObject); 
				return; 
			case SuricatePackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Ligne returns Affectation
	 *     Affectation returns Affectation
	 *
	 * Constraint:
	 *     (obj=Objet var=Variable)
	 */
	protected void sequence_Affectation(ISerializationContext context, Affectation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SuricatePackage.Literals.AFFECTATION__OBJ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuricatePackage.Literals.AFFECTATION__OBJ));
			if (transientValues.isValueTransient(semanticObject, SuricatePackage.Literals.AFFECTATION__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuricatePackage.Literals.AFFECTATION__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAffectationAccess().getObjObjetParserRuleCall_0_0(), semanticObject.getObj());
		feeder.accept(grammarAccess.getAffectationAccess().getVarVariableParserRuleCall_2_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Objet returns Constructeur
	 *     Constructeur returns Constructeur
	 *     Parametre returns Constructeur
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Constructeur(ISerializationContext context, Constructeur semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SuricatePackage.Literals.CONSTRUCTEUR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuricatePackage.Literals.CONSTRUCTEUR__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstructeurAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Methode returns Methode
	 *
	 * Constraint:
	 *     (para=Parametre para=Parametre*)+
	 */
	protected void sequence_Methode(ISerializationContext context, Methode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ligne returns Operation
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     (name=[Variable|ID] methode=Methode)
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SuricatePackage.Literals.OPERATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuricatePackage.Literals.OPERATION__NAME));
			if (transientValues.isValueTransient(semanticObject, SuricatePackage.Literals.OPERATION__METHODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuricatePackage.Literals.OPERATION__METHODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationAccess().getNameVariableIDTerminalRuleCall_0_0_1(), semanticObject.eGet(SuricatePackage.Literals.OPERATION__NAME, false));
		feeder.accept(grammarAccess.getOperationAccess().getMethodeMethodeParserRuleCall_2_0(), semanticObject.getMethode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Programme returns Programme
	 *
	 * Constraint:
	 *     elements+=Ligne+
	 */
	protected void sequence_Programme(ISerializationContext context, Programme semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *     Parametre returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SuricatePackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SuricatePackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
