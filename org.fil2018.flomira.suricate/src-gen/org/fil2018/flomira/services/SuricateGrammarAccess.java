/*
 * generated by Xtext 2.12.0
 */
package org.fil2018.flomira.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SuricateGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgrammeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.Programme");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsLigneParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Programme:
		//	elements+=Ligne*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Ligne*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Ligne
		public RuleCall getElementsLigneParserRuleCall_0() { return cElementsLigneParserRuleCall_0; }
	}
	public class LigneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.Ligne");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cInstrAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cInstrInstructionParserRuleCall_0_0_0 = (RuleCall)cInstrAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cVarAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cVarVariableParserRuleCall_0_1_1_0 = (RuleCall)cVarAssignment_0_1_1.eContents().get(0);
		private final Assignment cAffAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAffAffectationParserRuleCall_1_0 = (RuleCall)cAffAssignment_1.eContents().get(0);
		
		//Ligne:
		//	instr=Instruction ("->" var=Variable)? | aff=Affectation;
		@Override public ParserRule getRule() { return rule; }
		
		//instr=Instruction ("->" var=Variable)? | aff=Affectation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//instr=Instruction ("->" var=Variable)?
		public Group getGroup_0() { return cGroup_0; }
		
		//instr=Instruction
		public Assignment getInstrAssignment_0_0() { return cInstrAssignment_0_0; }
		
		//Instruction
		public RuleCall getInstrInstructionParserRuleCall_0_0_0() { return cInstrInstructionParserRuleCall_0_0_0; }
		
		//("->" var=Variable)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1_0() { return cHyphenMinusGreaterThanSignKeyword_0_1_0; }
		
		//var=Variable
		public Assignment getVarAssignment_0_1_1() { return cVarAssignment_0_1_1; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_0_1_1_0() { return cVarVariableParserRuleCall_0_1_1_0; }
		
		//aff=Affectation
		public Assignment getAffAssignment_1() { return cAffAssignment_1; }
		
		//Affectation
		public RuleCall getAffAffectationParserRuleCall_1_0() { return cAffAffectationParserRuleCall_1_0; }
	}
	public class AffectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.Affectation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAffectationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValeurAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValeurTypePrimaireParserRuleCall_1_0 = (RuleCall)cValeurAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		
		//Affectation:
		//	{Affectation} valeur=TypePrimaire ("->" variable=Variable)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Affectation} valeur=TypePrimaire ("->" variable=Variable)?
		public Group getGroup() { return cGroup; }
		
		//{Affectation}
		public Action getAffectationAction_0() { return cAffectationAction_0; }
		
		//valeur=TypePrimaire
		public Assignment getValeurAssignment_1() { return cValeurAssignment_1; }
		
		//TypePrimaire
		public RuleCall getValeurTypePrimaireParserRuleCall_1_0() { return cValeurTypePrimaireParserRuleCall_1_0; }
		
		//("->" variable=Variable)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0() { return cHyphenMinusGreaterThanSignKeyword_2_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_1_0() { return cVariableVariableParserRuleCall_2_1_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAppelMethodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoucleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Instruction:
		//	AppelMethode | Boucle;
		@Override public ParserRule getRule() { return rule; }
		
		//AppelMethode | Boucle
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AppelMethode
		public RuleCall getAppelMethodeParserRuleCall_0() { return cAppelMethodeParserRuleCall_0; }
		
		//Boucle
		public RuleCall getBoucleParserRuleCall_1() { return cBoucleParserRuleCall_1; }
	}
	public class BoucleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.Boucle");
		private final RuleCall cIfBoucleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Boucle:
		//	IfBoucle;
		@Override public ParserRule getRule() { return rule; }
		
		//IfBoucle
		public RuleCall getIfBoucleParserRuleCall() { return cIfBoucleParserRuleCall; }
	}
	public class IfBoucleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.IfBoucle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAppelMethodeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIfBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIfBodyLigneParserRuleCall_4_0 = (RuleCall)cIfBodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IfBoucle:
		//	"If" AppelMethode "Then" "{" ifBody+=Ligne+ "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"If" AppelMethode "Then" "{" ifBody+=Ligne+ "}"
		public Group getGroup() { return cGroup; }
		
		//"If"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//AppelMethode
		public RuleCall getAppelMethodeParserRuleCall_1() { return cAppelMethodeParserRuleCall_1; }
		
		//"Then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//ifBody+=Ligne+
		public Assignment getIfBodyAssignment_4() { return cIfBodyAssignment_4; }
		
		//Ligne
		public RuleCall getIfBodyLigneParserRuleCall_4_0() { return cIfBodyLigneParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AppelMethodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.AppelMethode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAppelMethSimpleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAppelMethCompositeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AppelMethode:
		//	AppelMethSimple | AppelMethComposite;
		@Override public ParserRule getRule() { return rule; }
		
		//AppelMethSimple | AppelMethComposite
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AppelMethSimple
		public RuleCall getAppelMethSimpleParserRuleCall_0() { return cAppelMethSimpleParserRuleCall_0; }
		
		//AppelMethComposite
		public RuleCall getAppelMethCompositeParserRuleCall_1() { return cAppelMethCompositeParserRuleCall_1; }
	}
	public class AppelMethCompositeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.AppelMethComposite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameVariableCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cNameVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMethodeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMethodeAppelMethSimpleParserRuleCall_1_1_0 = (RuleCall)cMethodeAssignment_1_1.eContents().get(0);
		
		//AppelMethComposite:
		//	name=[Variable] ("." methode+=AppelMethSimple)+;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Variable] ("." methode+=AppelMethSimple)+
		public Group getGroup() { return cGroup; }
		
		//name=[Variable]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Variable]
		public CrossReference getNameVariableCrossReference_0_0() { return cNameVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getNameVariableIDTerminalRuleCall_0_0_1() { return cNameVariableIDTerminalRuleCall_0_0_1; }
		
		//("." methode+=AppelMethSimple)+
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//methode+=AppelMethSimple
		public Assignment getMethodeAssignment_1_1() { return cMethodeAssignment_1_1; }
		
		//AppelMethSimple
		public RuleCall getMethodeAppelMethSimpleParserRuleCall_1_1_0() { return cMethodeAppelMethSimpleParserRuleCall_1_1_0; }
	}
	public class TypePrimaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.TypePrimaire");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypePrimaire:
		//	IntLiteral | StringLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.IntLiteral");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntLiteral:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.StringLiteral");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringLiteral:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class AppelMethSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.AppelMethSimple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodeAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParametreParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParametreParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AppelMethSimple:
		//	{Methode} ID "(" (params+=Parametre ("," params+=Parametre)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{Methode} ID "(" (params+=Parametre ("," params+=Parametre)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//{Methode}
		public Action getMethodeAction_0() { return cMethodeAction_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=Parametre ("," params+=Parametre)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=Parametre
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//Parametre
		public RuleCall getParamsParametreParserRuleCall_3_0_0() { return cParamsParametreParserRuleCall_3_0_0; }
		
		//("," params+=Parametre)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=Parametre
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//Parametre
		public RuleCall getParamsParametreParserRuleCall_3_1_1_0() { return cParamsParametreParserRuleCall_3_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ParametreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.fil2018.flomira.Suricate.Parametre");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypePrimaireParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Parametre:
		//	Instruction | Variable | TypePrimaire;
		@Override public ParserRule getRule() { return rule; }
		
		//Instruction | Variable | TypePrimaire
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Instruction
		public RuleCall getInstructionParserRuleCall_0() { return cInstructionParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//TypePrimaire
		public RuleCall getTypePrimaireParserRuleCall_2() { return cTypePrimaireParserRuleCall_2; }
	}
	
	
	private final ProgrammeElements pProgramme;
	private final LigneElements pLigne;
	private final AffectationElements pAffectation;
	private final InstructionElements pInstruction;
	private final BoucleElements pBoucle;
	private final IfBoucleElements pIfBoucle;
	private final AppelMethodeElements pAppelMethode;
	private final AppelMethCompositeElements pAppelMethComposite;
	private final TypePrimaireElements pTypePrimaire;
	private final VariableElements pVariable;
	private final IntLiteralElements pIntLiteral;
	private final StringLiteralElements pStringLiteral;
	private final AppelMethSimpleElements pAppelMethSimple;
	private final ParametreElements pParametre;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SuricateGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgramme = new ProgrammeElements();
		this.pLigne = new LigneElements();
		this.pAffectation = new AffectationElements();
		this.pInstruction = new InstructionElements();
		this.pBoucle = new BoucleElements();
		this.pIfBoucle = new IfBoucleElements();
		this.pAppelMethode = new AppelMethodeElements();
		this.pAppelMethComposite = new AppelMethCompositeElements();
		this.pTypePrimaire = new TypePrimaireElements();
		this.pVariable = new VariableElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pAppelMethSimple = new AppelMethSimpleElements();
		this.pParametre = new ParametreElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.fil2018.flomira.Suricate".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Programme:
	//	elements+=Ligne*;
	public ProgrammeElements getProgrammeAccess() {
		return pProgramme;
	}
	
	public ParserRule getProgrammeRule() {
		return getProgrammeAccess().getRule();
	}
	
	//Ligne:
	//	instr=Instruction ("->" var=Variable)? | aff=Affectation;
	public LigneElements getLigneAccess() {
		return pLigne;
	}
	
	public ParserRule getLigneRule() {
		return getLigneAccess().getRule();
	}
	
	//Affectation:
	//	{Affectation} valeur=TypePrimaire ("->" variable=Variable)?;
	public AffectationElements getAffectationAccess() {
		return pAffectation;
	}
	
	public ParserRule getAffectationRule() {
		return getAffectationAccess().getRule();
	}
	
	//Instruction:
	//	AppelMethode | Boucle;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Boucle:
	//	IfBoucle;
	public BoucleElements getBoucleAccess() {
		return pBoucle;
	}
	
	public ParserRule getBoucleRule() {
		return getBoucleAccess().getRule();
	}
	
	//IfBoucle:
	//	"If" AppelMethode "Then" "{" ifBody+=Ligne+ "}";
	public IfBoucleElements getIfBoucleAccess() {
		return pIfBoucle;
	}
	
	public ParserRule getIfBoucleRule() {
		return getIfBoucleAccess().getRule();
	}
	
	//AppelMethode:
	//	AppelMethSimple | AppelMethComposite;
	public AppelMethodeElements getAppelMethodeAccess() {
		return pAppelMethode;
	}
	
	public ParserRule getAppelMethodeRule() {
		return getAppelMethodeAccess().getRule();
	}
	
	//AppelMethComposite:
	//	name=[Variable] ("." methode+=AppelMethSimple)+;
	public AppelMethCompositeElements getAppelMethCompositeAccess() {
		return pAppelMethComposite;
	}
	
	public ParserRule getAppelMethCompositeRule() {
		return getAppelMethCompositeAccess().getRule();
	}
	
	//TypePrimaire:
	//	IntLiteral | StringLiteral;
	public TypePrimaireElements getTypePrimaireAccess() {
		return pTypePrimaire;
	}
	
	public ParserRule getTypePrimaireRule() {
		return getTypePrimaireAccess().getRule();
	}
	
	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//IntLiteral:
	//	INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//	STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//AppelMethSimple:
	//	{Methode} ID "(" (params+=Parametre ("," params+=Parametre)*)? ")";
	public AppelMethSimpleElements getAppelMethSimpleAccess() {
		return pAppelMethSimple;
	}
	
	public ParserRule getAppelMethSimpleRule() {
		return getAppelMethSimpleAccess().getRule();
	}
	
	//Parametre:
	//	Instruction | Variable | TypePrimaire;
	public ParametreElements getParametreAccess() {
		return pParametre;
	}
	
	public ParserRule getParametreRule() {
		return getParametreAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
