/**
 * generated by Xtext 2.12.0
 */
package org.fil2018.flomira.suricate.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.fil2018.flomira.suricate.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.fil2018.flomira.suricate.SuricatePackage
 * @generated
 */
public class SuricateAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SuricatePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SuricateAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SuricatePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SuricateSwitch<Adapter> modelSwitch =
    new SuricateSwitch<Adapter>()
    {
      @Override
      public Adapter caseProgramme(Programme object)
      {
        return createProgrammeAdapter();
      }
      @Override
      public Adapter caseLigne(Ligne object)
      {
        return createLigneAdapter();
      }
      @Override
      public Adapter caseAffectation(Affectation object)
      {
        return createAffectationAdapter();
      }
      @Override
      public Adapter caseInstruction(Instruction object)
      {
        return createInstructionAdapter();
      }
      @Override
      public Adapter caseBoucle(Boucle object)
      {
        return createBoucleAdapter();
      }
      @Override
      public Adapter caseIfBoucle(IfBoucle object)
      {
        return createIfBoucleAdapter();
      }
      @Override
      public Adapter caseAppelMethode(AppelMethode object)
      {
        return createAppelMethodeAdapter();
      }
      @Override
      public Adapter caseAppelMethComposite(AppelMethComposite object)
      {
        return createAppelMethCompositeAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseAppelMethSimple(AppelMethSimple object)
      {
        return createAppelMethSimpleAdapter();
      }
      @Override
      public Adapter caseParametre(Parametre object)
      {
        return createParametreAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.fil2018.flomira.suricate.Programme <em>Programme</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.fil2018.flomira.suricate.Programme
   * @generated
   */
  public Adapter createProgrammeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.fil2018.flomira.suricate.Ligne <em>Ligne</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.fil2018.flomira.suricate.Ligne
   * @generated
   */
  public Adapter createLigneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.fil2018.flomira.suricate.Affectation <em>Affectation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.fil2018.flomira.suricate.Affectation
   * @generated
   */
  public Adapter createAffectationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.fil2018.flomira.suricate.Instruction <em>Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.fil2018.flomira.suricate.Instruction
   * @generated
   */
  public Adapter createInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.fil2018.flomira.suricate.Boucle <em>Boucle</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.fil2018.flomira.suricate.Boucle
   * @generated
   */
  public Adapter createBoucleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.fil2018.flomira.suricate.IfBoucle <em>If Boucle</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.fil2018.flomira.suricate.IfBoucle
   * @generated
   */
  public Adapter createIfBoucleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.fil2018.flomira.suricate.AppelMethode <em>Appel Methode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.fil2018.flomira.suricate.AppelMethode
   * @generated
   */
  public Adapter createAppelMethodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.fil2018.flomira.suricate.AppelMethComposite <em>Appel Meth Composite</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.fil2018.flomira.suricate.AppelMethComposite
   * @generated
   */
  public Adapter createAppelMethCompositeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.fil2018.flomira.suricate.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.fil2018.flomira.suricate.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.fil2018.flomira.suricate.AppelMethSimple <em>Appel Meth Simple</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.fil2018.flomira.suricate.AppelMethSimple
   * @generated
   */
  public Adapter createAppelMethSimpleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.fil2018.flomira.suricate.Parametre <em>Parametre</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.fil2018.flomira.suricate.Parametre
   * @generated
   */
  public Adapter createParametreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SuricateAdapterFactory
