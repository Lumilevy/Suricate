/**
 * generated by Xtext 2.12.0
 */
package org.fil2018.flomira.suricate.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.fil2018.flomira.suricate.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.fil2018.flomira.suricate.SuricatePackage
 * @generated
 */
public class SuricateSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SuricatePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SuricateSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SuricatePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SuricatePackage.PROGRAMME:
      {
        Programme programme = (Programme)theEObject;
        T result = caseProgramme(programme);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SuricatePackage.LIGNE:
      {
        Ligne ligne = (Ligne)theEObject;
        T result = caseLigne(ligne);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SuricatePackage.AFFECTATION:
      {
        Affectation affectation = (Affectation)theEObject;
        T result = caseAffectation(affectation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SuricatePackage.INSTRUCTION:
      {
        Instruction instruction = (Instruction)theEObject;
        T result = caseInstruction(instruction);
        if (result == null) result = caseParametre(instruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SuricatePackage.BOUCLE:
      {
        Boucle boucle = (Boucle)theEObject;
        T result = caseBoucle(boucle);
        if (result == null) result = caseInstruction(boucle);
        if (result == null) result = caseParametre(boucle);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SuricatePackage.IF_BOUCLE:
      {
        IfBoucle ifBoucle = (IfBoucle)theEObject;
        T result = caseIfBoucle(ifBoucle);
        if (result == null) result = caseBoucle(ifBoucle);
        if (result == null) result = caseInstruction(ifBoucle);
        if (result == null) result = caseParametre(ifBoucle);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SuricatePackage.APPEL_METHODE:
      {
        AppelMethode appelMethode = (AppelMethode)theEObject;
        T result = caseAppelMethode(appelMethode);
        if (result == null) result = caseIfBoucle(appelMethode);
        if (result == null) result = caseParametre(appelMethode);
        if (result == null) result = caseBoucle(appelMethode);
        if (result == null) result = caseInstruction(appelMethode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SuricatePackage.APPEL_METH_COMPOSITE:
      {
        AppelMethComposite appelMethComposite = (AppelMethComposite)theEObject;
        T result = caseAppelMethComposite(appelMethComposite);
        if (result == null) result = caseAppelMethode(appelMethComposite);
        if (result == null) result = caseIfBoucle(appelMethComposite);
        if (result == null) result = caseParametre(appelMethComposite);
        if (result == null) result = caseBoucle(appelMethComposite);
        if (result == null) result = caseInstruction(appelMethComposite);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SuricatePackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = caseParametre(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SuricatePackage.APPEL_METH_SIMPLE:
      {
        AppelMethSimple appelMethSimple = (AppelMethSimple)theEObject;
        T result = caseAppelMethSimple(appelMethSimple);
        if (result == null) result = caseAppelMethode(appelMethSimple);
        if (result == null) result = caseIfBoucle(appelMethSimple);
        if (result == null) result = caseParametre(appelMethSimple);
        if (result == null) result = caseBoucle(appelMethSimple);
        if (result == null) result = caseInstruction(appelMethSimple);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SuricatePackage.PARAMETRE:
      {
        Parametre parametre = (Parametre)theEObject;
        T result = caseParametre(parametre);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SuricatePackage.METHODE:
      {
        Methode methode = (Methode)theEObject;
        T result = caseMethode(methode);
        if (result == null) result = caseAppelMethSimple(methode);
        if (result == null) result = caseAppelMethode(methode);
        if (result == null) result = caseIfBoucle(methode);
        if (result == null) result = caseParametre(methode);
        if (result == null) result = caseBoucle(methode);
        if (result == null) result = caseInstruction(methode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Programme</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Programme</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProgramme(Programme object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ligne</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ligne</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLigne(Ligne object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Affectation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Affectation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAffectation(Affectation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstruction(Instruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boucle</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boucle</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoucle(Boucle object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Boucle</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Boucle</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfBoucle(IfBoucle object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Appel Methode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Appel Methode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAppelMethode(AppelMethode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Appel Meth Composite</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Appel Meth Composite</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAppelMethComposite(AppelMethComposite object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Appel Meth Simple</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Appel Meth Simple</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAppelMethSimple(AppelMethSimple object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parametre</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parametre</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParametre(Parametre object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Methode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Methode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethode(Methode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SuricateSwitch
