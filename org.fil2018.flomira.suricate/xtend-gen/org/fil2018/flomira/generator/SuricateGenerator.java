/**
 * generated by Xtext 2.12.0
 */
package org.fil2018.flomira.generator;

import com.google.common.collect.Iterables;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.fil2018.flomira.suricate.Affectation;
import org.fil2018.flomira.suricate.Ligne;
import org.fil2018.flomira.suricate.Programme;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SuricateGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Programme> _filter = Iterables.<Programme>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Programme.class);
    for (final Programme p : _filter) {
      fsa.generateFile("Main.java", this.compile(p));
    }
  }
  
  public CharSequence compile(final Programme p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.io.FileInputStream;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.google.api.client.auth.oauth2.Credential;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.google.api.client.http.HttpTransport;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.google.api.client.json.jackson2.JacksonFactory;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.google.api.client.json.JsonFactory;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.google.api.client.util.store.FileDataStoreFactory;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.google.api.services.gmail.GmailScopes;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.google.api.services.gmail.model.*;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.google.api.services.gmail.Gmail;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.io.InputStream;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.io.InputStreamReader;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class Main {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/** Application name. */");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final String APPLICATION_NAME =");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\"Gmail API Java Quickstart\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/** Directory to store user credentials for this application. */");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final java.io.File DATA_STORE_DIR = new java.io.File(");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("System.getProperty(\"user.home\"), \".credentials/gmail-java-quickstart\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/** Global instance of the {@link FileDataStoreFactory}. */");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static FileDataStoreFactory DATA_STORE_FACTORY;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/** Global instance of the JSON factory. */");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final JsonFactory JSON_FACTORY =");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("JacksonFactory.getDefaultInstance();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/** Global instance of the HTTP transport. */");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static HttpTransport HTTP_TRANSPORT;");
    _builder.newLine();
    _builder.append("   \t");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("private static final List<String> SCOPES =");
    _builder.newLine();
    _builder.append("   \t            ");
    _builder.append("Arrays.asList(GmailScopes.GMAIL_LABELS);");
    _builder.newLine();
    _builder.append("   \t");
    _builder.newLine();
    _builder.append("   \t    ");
    _builder.append("static {");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("   \t            ");
    _builder.append("HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();");
    _builder.newLine();
    _builder.append("   \t            ");
    _builder.append("DATA_STORE_FACTORY = new FileDataStoreFactory(DATA_STORE_DIR);");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("} catch (Throwable t) {");
    _builder.newLine();
    _builder.append("   \t            ");
    _builder.append("t.printStackTrace();");
    _builder.newLine();
    _builder.append("   \t            ");
    _builder.append("System.exit(1);");
    _builder.newLine();
    _builder.append("   \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t    ");
    _builder.newLine();
    _builder.append("   \t    ");
    _builder.append("public static Credential authorize() throws IOException {");
    _builder.newLine();
    _builder.append("   \t            ");
    _builder.append("// Load client secrets.");
    _builder.newLine();
    _builder.append("   \t            ");
    _builder.append("InputStream in =");
    _builder.newLine();
    _builder.append("   \t                    ");
    _builder.append("new FileInputStream(new File(\"resources/gmail_client_secret.json\"));");
    _builder.newLine();
    _builder.append("   \t            ");
    _builder.append("GoogleClientSecrets clientSecrets =");
    _builder.newLine();
    _builder.append("   \t                    ");
    _builder.append("GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));");
    _builder.newLine();
    _builder.append("   \t    ");
    _builder.newLine();
    _builder.append("   \t            ");
    _builder.append("// Build flow and trigger user authorization request.");
    _builder.newLine();
    _builder.append("   \t            ");
    _builder.append("GoogleAuthorizationCodeFlow flow =");
    _builder.newLine();
    _builder.append("   \t                    ");
    _builder.append("new GoogleAuthorizationCodeFlow.Builder(");
    _builder.newLine();
    _builder.append("   \t                            ");
    _builder.append("HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)");
    _builder.newLine();
    _builder.append("   \t                            ");
    _builder.append(".setDataStoreFactory(DATA_STORE_FACTORY)");
    _builder.newLine();
    _builder.append("   \t                            ");
    _builder.append(".setAccessType(\"offline\")");
    _builder.newLine();
    _builder.append("   \t                            ");
    _builder.append(".build();");
    _builder.newLine();
    _builder.append("   \t            ");
    _builder.append("Credential credential = new AuthorizationCodeInstalledApp(");
    _builder.newLine();
    _builder.append("   \t                    ");
    _builder.append("flow, new LocalServerReceiver()).authorize(\"user\");");
    _builder.newLine();
    _builder.append("   \t            ");
    _builder.append("System.out.println(");
    _builder.newLine();
    _builder.append("   \t                    ");
    _builder.append("\"Credentials saved to \" + DATA_STORE_DIR.getAbsolutePath());");
    _builder.newLine();
    _builder.append("   \t            ");
    _builder.append("return credential;");
    _builder.newLine();
    _builder.append("   \t     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t     ");
    _builder.newLine();
    _builder.append("   \t     ");
    _builder.append("public static Gmail getGmailService() throws IOException {");
    _builder.newLine();
    _builder.append("   \t             ");
    _builder.append("Credential credential = authorize();");
    _builder.newLine();
    _builder.append("   \t             ");
    _builder.append("return new Gmail.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential)");
    _builder.newLine();
    _builder.append("   \t                     ");
    _builder.append(".setApplicationName(APPLICATION_NAME)");
    _builder.newLine();
    _builder.append("   \t                     ");
    _builder.append(".build();");
    _builder.newLine();
    _builder.append("   \t     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static void main(String[] args) throws IOException {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Build a new authorized API client service.");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("Gmail service = getGmailService();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("// Print the labels in the user\'s account.");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("String user = \"me\";");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("ListLabelsResponse listResponse =");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("service.users().labels().list(user).execute();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("List<Label> labels = listResponse.getLabels();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if (labels.size() == 0) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("System.out.println(\"No labels found.\");");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("System.out.println(\"Labels:\");");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("for (Label label : labels) {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("System.out.printf(\"- %s\\n\", label.getName());");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    {
      EList<Ligne> _elements = p.getElements();
      for(final Ligne l : _elements) {
        _builder.append("\t\t\t");
        CharSequence _compile = this.compile(l);
        _builder.append(_compile, "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Ligne l) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Affectation _aff = l.getAff();
      boolean _tripleNotEquals = (_aff != null);
      if (_tripleNotEquals) {
        CharSequence _compile = this.compile(l.getAff());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Affectation a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Object ");
    String _name = a.getVariable().getName();
    _builder.append(_name);
    _builder.append(" = ");
    String _valeur = a.getValeur();
    _builder.append(_valeur);
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
